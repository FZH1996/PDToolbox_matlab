\documentclass[a4paper,10pt]{article}

\usepackage[utf8]{inputenc}
\usepackage{epsfig}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{array}
\usepackage{float} 
\usepackage{ctable}
\usepackage{multirow}
\usepackage{graphicx}
\usepackage{caption}
\usepackage{subcaption}
\usepackage{amsfonts}
\usepackage{cite}
\usepackage[]{algorithm2e}

\usepackage{fullpage}

\usepackage{listings}
\lstset{breaklines=true} 


\def\th{^{th}}
\newcommand{\bs}[1]{\boldsymbol{#1}}
\newcommand{\pop}{\mathcal{P}}

\def\th{^{th}}
\def\pd{\frac{\partial}{\partial q_i^k}}
\newcommand{\mcf}[1]{p\Big( \norm{\bs{#1}^k}_1 \Big)}
\def\pdy{\frac{\partial}{\partial y_i^k}}
\def\pdq{\frac{\partial}{\partial q_i^k}}
\newcommand{\diag}{\mathop{\mathrm{diag}}}
%\newcommand{\bs}[1]{\boldsymbol{#1}}
\newcommand{\norm}[1]{\left\lVert#1\right\rVert}

\newcommand{\normb}[1]{\left\lVert \bs{#1} \right\rVert_1}


\usepackage{autonum}
\usepackage{placeins}

\title{Population Dynamics Toolbox}
\author{Carlos Barreto}

\begin{document}
\lstset{language=Matlab} 
\maketitle



\begin{abstract}
 The \emph{population dynamics toolbox} (PDToolbox) contains a set of functions to implement evolutionary dynamics with multiple populations. We consider both small and large populations. For finite populations, we implement some revision protocols to model random interactions between agents. On the other hand, the evolution of a society with large populations is approximated by dynamical equations. 
 
 This toolbox is designed to facilitate the implementation of any game with different evolutionary dynamics or revision protocols.  In particular, our attempt is to make an efficient implementation of the algorithms to compute the dynamical evolution of the society. Also, the toolbox counts with some functions to plot the state of the system and the evolution of each strategy.
 
 In Section \ref{sec:introduction} we start by introducing the notation used along the paper and we present some ideas of population games which lead to the \emph{mean dynamics} equation. In Section \ref{sec:protocols} we introduce some well known revision protocols and evolutionary dynamics. In Section \ref{sec:implementation} we introduce some details of the implementation of games with the toolbox and show an example of the implementation of the rock-paper-scissors game.
 Sections \ref{sec:combined} and \ref{sec:multi-pop} contain examples of the implementation of \emph{combined dynamics} and \emph{multi-population games}.
 
\end{abstract}


\tableofcontents



\input{introduction}
 
\input{evolutionary_dynamics} 

\input{implementation} 

\input{combined_dynamics}

\input{multipopulation}

\input{maximization}

\input{example_dr}


\section{Running Time Analysis}


In this section we investigate the running time of the evolutionary dynamics as a function of either the number of populations or the number of strategies per population. We use the demand response example in Section \ref{sec:dr_example} to make the experiments.
Our interest is to observe the time that takes to simulate the evolution of the dynamics during 10 seconds.

Fig. \ref{fig:running_pop} shows the running time of the game for multiple number of populations. In this case each population has 24 strategies and all populations have the same set of fitness functions. 
From the simulations we observe that the running time increases roughly linearly for all dynamics. The fastest simulations are made with replicator dynamics. On the other hand, Smith and Logit dynamics have almost the same running time. 

Note that the time complexity of the algorithms, with respect to number of populations $P$, is $O(P T_f(n,P))$. The fitness function in the example can be calculated in $T_f(n,P)=O(nP)$

Even though the 

\ref{fig:running_str} and 
 
\begin{figure}[htb]
 \includegraphics[1\textwidth]{./images/running_time_population.eps}
 \caption{Running time of the dynamics as a function of the number of populations.}
 \label{fig:running_pop}
\end{figure}


\begin{figure}[htb]
 \includegraphics[1\textwidth]{./images/running_time_strategies.eps}
 \caption{Running time of the dynamics as a function of the number of strategies per population.}
 \label{fig:running_str}
\end{figure}

\iffalse

 \FloatBarrier
 
\section{Designing games}

In the previous section we show some examples of strategical situations that can be analyzed with game theory. In these cases, the structure of the game is given by the problem. However, we can modify the fitness function of each player in order to solve an optimization problem.

For example, let us consider the following optimization problem:

\begin{equation}\label{eq:opt_problem}
\begin{aligned}
& \underset{x}{\text{maximize}} 
& & \sum_{i=1}^N U_i(x_i)  - C(|x|)\\
& \text{subject to}
& & 0 \leq q_i \geq m,  i =\{1,\ldots, N\}.
\end{aligned}
\end{equation}

This can be seen as a problem of allocating a finite resource to maximize a utility function. 

Note that there are $N$ agents with that give a valuation $v_i(x_i)$ to the resource $x_i$.

However, the cost of assigning the resource is $C(|x|)$ .

The cost of assigning the resource might be distributed among the population. 

Let us consider the following example:


\begin{equation}
U_i(x_i) =   \alpha_i  log(1+x_i) 
\end{equation}

\begin{equation}
C(z) = \beta z^2 + b z 
\end{equation}

define fitness functions as 

\begin{equation}
f_i(x_1, x_2) = \frac{\alpha_i}{1+x_i} - 2 \beta |x| - b 
\end{equation}

\fi


--



\bibliographystyle{plain}
\bibliography{references}



\end{document}



\iffalse


      
\begin{figure}[htb]
 \includegraphics[1\textwidth]{./images/}
 \caption{}
 \label{fig:}
\end{figure}



\fi
